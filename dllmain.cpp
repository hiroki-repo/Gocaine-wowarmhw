/* Gocaine wowarmhw Code name : Red Bird
 This program is basically unlicensed, but compornent of this software may be GPLv2

MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNXKK00KKXNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKkoc,'........',:ldkKNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKd;.                   .':oxkXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0c.         ..........         .;oOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXo.       ...''''''''''''.....       .cxKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXc       ..''''''''''''''''''''.....     .:xXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWx.      ..''''''''''''''''''''''''''...     .cONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWl      ..'''''''''''''''''''''''''''''''..     ,dKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWd.     .''''''''''''''''''''''''''''''''''...    .l0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK;      .''''''''''''''''''''''''''''''''''''..    .cOWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWO,     ..'''''''''''''''''''''''''''''''''''''..    .:OWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNXKOOkxxdddddxxkkO0KKXO;      .''''''''''''''''''''''''''''''''''''''...   .c0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNKkdl:,...               ....'.       ..'''''''''''''''''''''''''''''''''''''''..   .lKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKxc,.       ...................            ..'''''''''''''''''''''''''''''''''''''''.    'dNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXx;.     .....''''''''''''''''''''''......       ..'''''''''''''''''''''''''''''''''''''..    ;0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXd'      ..'''''''''''''''''''''''''''''''''...      ...''''''''''''''''''''''''''''''''''''..   .oNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0;      .'''''''''''''''''''''''''''''''''''''''..       ...'''''''''''''''''''''''''''''''''''.    :0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWO'     ..'''''''''''''''''''''''''''''''''''''''''''..        ...''''''''''''''''''''''''''''''''..   'kWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;      .'''''''''''''''''''''''''''''''''''''''''''''''...       ....''''''''''''''''''''''''''''''.   .dNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK,      .''''''''''''''''''''''''''''''''''''''''''''''''''...        .....''''''''''''''''''''''''''..  .oNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNo.      ..'''''''''''''''''''''''''''''''''''''''''''''''''''....         ....'''''''''''''''''''''''..  .oNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNk,       ....''''''''''''''''''''''''''''''''''''''''''''''''''''........   ......''''''''''''''''''''.  .dWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNkl,.        ........''''''''''''''''''''''''''''''''''''''''''''''''''''...........''''''''''''''''''.  .OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0xo:,..            ..............................''''''''''''''''''''''''''''''''''''''''''''''''''.  'd0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNX0kxol:;,'.                    ..........''''''''''''''''''''''''''''''''''''''''''''''''''''''.   .'cd0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKx;.           ........'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''..      .,lkXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNkc.          ...'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''..         .cxKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0o'          ...'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''....         .:xKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXx:.        ...'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''....        .:xXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKo'        ...''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''...        .cONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0l.        ..''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''...        ,oKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWO:.       ...'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''...       .cONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNO:.       ..'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''...       ,xXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWO:.       ..''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''..       'oKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0:.      ..''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''..      .lKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKl.      ..''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''..      .l0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXd.      ..''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''..      .lKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWO,      ..''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''..      .oXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKc.      ..''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''..     'xNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNx'      ..''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''.      ;OWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKc.     ..'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''..     .lKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWk'      .'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''..     'kNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXl.     ..''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''..    .cKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0;      .'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''..     'kWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWk'     ..''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''..    .oXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNo.     .''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''.     :0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXc     ..''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''..    'kWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK:     ..''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''..    .xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0;     ..'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''.    .oNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM0,     .''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''.     lXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKOXMMMMMMMMMMMMMMMO'     .''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''..    cXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNkc..;OWMMMMMMMMMMMMO,     .''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''..    cXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKd,.    ,OWMMMMMMMMMM0,     .''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''.....'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''..    lNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKl'        ,OWMMMMMMMM0;     .''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''.      .....''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''..   .oNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKo.           ,OWMMMMMMK:     .''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''.              .....''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''...    .dWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMM0,              ,0MMMMMNc     .'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''.                   ......'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''......         .kWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMNNWMMMMMMMMMKl.              ;0MMMNo.    .'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''.                          .....'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''......                 ,0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMWk;';cdOXWMMMMMWO:.             ;0MWk.    .''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''.                                .....'''''''''''''''''''''''''''''''''''''''''''''''......                        cXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMWx.     .':okKWMMMNO:.            ;00,    ..'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''.                                       .....''''''''''''''''''''''''''''''''''......                               .dWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMWx.          ..;okXWMNOc.           ,,    ..''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''.                                            .....'''''''''''''''''''''''......                                      '0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMO'               ..;okKN0l'               .''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''..                                                  .....'''''''''''......                                             cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMK;                    ..;okkd;.           .''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''..                                                       .........                                                    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMNl.                        ..;c:,.        ..''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''.......                                                                                                              cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMk.                             .....      .'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''.......    .                                                                                         ....    .OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMNl                                        ..'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''...  ;kKOkdlc;,..                                                                      .........'''''.    lNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMWk:,..                                    .''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''...  .lXMMMMMMMWWXK0kdoc:,'..                                             ...,;clodc. ..'''''''''''''''.    ,0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMWNX0kxolc:;'....                       ..''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''....  .lNMMMMMMMMMMMMMMMMMMWNX0Oxdlc;'..                         ..',:cloxkOKXNWWMMMMWk, ..''''''''''''''..   .xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMWWNXK0Okxdolc::;,''.....      .''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''....   ;KMMMMMMMMMMMMMMMMMMMMMMWX0kxkO0KK0kdoc:;.      ..,;:lodxO0KXNWWMMMMMMMMMMMMMMMMM0;  ..'''''''''''''.    cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0kdl:;'..      .''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''...... .,xWMMMMMMMMMMMMMMMMMMMMNk:.     .;xXMMMMMWXl   .xXNWWWNOxddx0NMMMMMMMMMMMMMMMMMMMMMO' ...''''''''''''.    ,KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMWNKOxoc;'..            .''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''.....'''''''''''''''''''''......  ,d0WMMMMMMMMMMMMMMMMMMMXc           ;0MMMMMMO.  cNMMMXo'     .,xNMMMMMMMMMMMMMMMMMMMWo  ...'''''''''''.    .OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMNxc,..                   .'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''..........''''''''''''''''''.......  ;kKWMMMMMMMMMMMMMMMMMMWo             cNMMMMM0, .dWMMXc         .dWMMMMMMMMMMMMMMMMMMWk. .....'''''''''..   .xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMX:               .;,     .''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''.............'''''''''''''''........  ;k0NMMMMMMMMMMMMMMMMMMN:             ,KMMMMM0, .xMMMO.          ;XMMMMMMMMMMMMMMMMMMWO' .....'''''''''..    dWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMWx.           .,o0Xo    ..'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''...............'''''''''''''.........  'okNWMMMMMMMMMMMMMMMMMWd.            oNMMMMMk.  oWMMX:          lNMMMMMMMMMMMMMMMMMMWk' ......'''''''''.    lWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMNl.        'cONMMNc    .'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''.................''''''''''''.........  ..oKNWMMMMMMMMMMMMMMMMMNd.         .oXMMMMMNc   ;XMMMKc.      .oXMMMMMMMMMMMMMMMMMMWXd. .......''''''''.    lNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMK:     .:xXWMMMMX;    .'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''..................''''''''''..........    'kXXWMMMMMMMMMMMMMMMMMWKd:'...';o0WMMMMN0c.   .:xOXWWKxlclokXWMMMMMMMMMMMMMMMMMMWNO;  .......''''''''.    cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMM0; .,o0WMMMMMMMK,    .'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''..................'''''''''............    ,kXXNWMMMMMMMMMMMMMMMMMMWNXKXNWMMMWKxc'.         .;lkXWMMMMMMMMMMMMMMMMMMMMMMWWN0c   .......''''''''.    cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMKkONMMMMMMMMMM0'    .''''''''''''''''''''''''''''''''''''''''''''''''''''''''''....................''''''''.............    .dKXXNWWMMMMMMMMMMMMMMMMMMMMMMW0d;.  .';coooc:;'.   .;o0NMMMMMMMMMMMMMMMMMWWNX0c.  .........''''''..    lWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM0'    .''''''''''''''''''''''''''''''''''''''''''''''''''''''''''....................'''''''..............     .;kKXXXNNWWMMMMMMMMMMMMMMMN0o;. .':oxkOOOOOOOOkxoc,.  .,oONMMMMMMMMMMMWWNNXKd'   ..........''''''.     oWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM0'    .''''''''''''''''''''''''''''''''''''''......''''''''''''''....................'''''''.................    .;oOKXXXXNNNNNWWWWWWNN0o,...;lxOOOOOOOOOOOOOOOOOOkdc,. .,o0NWWWWWNNNXXKOo,    ...........''''''.    .xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK,    .'''''''''''''''''''''''''''''''''''............'''''''''''....................'''''''..................      .,ldk0KXXXXXXXXXOo;..':dkOOOOOOOOOOOOOOOOOOOOOOOOOxl,. .;d0XXXXKOxl;.    .............''''''.    .OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK;    .''''''''''''''''''''''''''''''''''..............''''''''''.....................''''''....................        ..,;:cclllc:...:dkOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOxl,. .:c:,'.      ..............''''''..    ,KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN:     .''''''''''''''''''''''''''''''''................'''''''''....................'''''''.......................                .;okOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOxc'         .................''''''.     cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWo     .''''''''''''''''''''''''''''''''.................'''''''''...................'''''''............................         .cxOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOko;.   ...................'''''''.    .dWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMx.    .''''''''''''''''''''''''''''''''.................'''''''''...................''''''''...............................   'lkOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOxc.  .................'''''''..    '0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM0'    ..'''''''''''''''''''''''''''''''..................'''''''''.................''''''''''.............................  'okOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOkl'. .............'''''''''.     cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc     .''''''''''''''''''''''''''''''''.................''''''''''...............''''''''''''..........................  .lkOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOkl'. .........''''''''''..    .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMx.    ..'''''''''''''''''''''''''''''''.................'''''''''''.............'''''''''''''''......................   ,xOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOkl'  ...''''''''''''''.     ;XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;     .''''''''''''''''''''''''''''''''...............''''''''''''''........'''''''''''''''''''''..................   :kOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOkc. ..'''''''''''''..    .xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWx.    ..'''''''''''''''''''''''''''''''''............''''''''''''''''''''''''''''''''''''''',,;;;::cccccccllllll:.   'xOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOd;. .''''''''''''.     :XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX:     .''''''''''''''''''''''''''''''''''''.......''''''''''''''''''''''''''''''',,;:clooddxkkOO000000000000000l.   'dOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOkl. ..'''''''''.     .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk.     .'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''',,;:lodxkOO00000000000K00000000000000o.    .;coxkOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOd'  .'''''''.      lNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNo      .'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''',;cloxkO00000000000000000000000000000000000x:.      ..,;:clodxkkOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOd'  .'''''..     ;KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX:      .'''''''''''''''''''''''''''''''''''''''''''''''''''''',;:ldxO000K000KK00000000000000000000000000000000K0o.   .''....  .....',;::cclooddxxkkkOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOl.  .'''..     .kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM0,      .''''''''''''''''''''''''''''''''''''''''''''''''',;coxk0000000000000K00000000000000000000000000000000000k:.  .cdxdollc::;,,''..............'',,;;;:::cccllllooooddddxxxxxxxxxxxxxc.   .'..     .oWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWO'      .'''''''''''''''''''''''''''''''''''''''''''',;coxO00000000000000000K0000000000000000000000000000000000000d'   'lxkxkkkkxkkxxxxdddoolllcc:::;;;,,'''.............................     ...      cXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWk'      ..''''''''''''''''''''''''''''''''''''''',:ldk000000000000000000000000000000000000000000000000000000000000kc.  .;oxkxxxxkkkxxkxxkkkxxxkkkkkkkkxxxxxxxxxddddoooollc,.   ..........    ..      :KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWO'       .''''''''''''''''''''''''''''''''''',:oxO00KK00K00000000000000000000000000000000000000000000000000000000K0x;   .;dxkxkkxkkxxxkkkxxxkkkkkkkxxxxxxxkkxkkxxkxxkxdc'. ..''''''''''''''.       ;KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0;       ..'''''''''''''''''''''''''''''',:oxO000000000000000000000000000000000000000000000000000000000000000KK0000Oo'   .:dxkkkxkkxxxxxxxxkkkxxxxxxkkkkkkkkxkkxkkxo:.  ..'''''''''''''''.       :KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXc.       ..''''''''''''''''''''''''',;lxO00000000000000000000000000000000000000000000000000000000000000000000000000Oc.   .cdkkxkkxxxxkxkkxkxxxxxxxkkkkxxxkkxkxdc,.  ..'''''''''''''''..       cXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNx.        ..''''''''''''''''''''',cdO0000000000000000000000000000000000000000000000000000000000000000000000000000000k:.   .cdkkxxxxkkxxxkxxxxxxxkxxkxxxxkkdl;.   ..''''''''''''''''.       .oXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0:         ..''''''''''''''''';lx000000000000000000000000000000000000000000000000000000000000000000000000000000000000x;.   .cdkkxkkxxkxxxxkxxxxxxxkxxkxl;.   ...''''''''''''''''..       .xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNx'         ..''''''''''''';ok00000000000000000000000000000000000000000000000000000000000000000000000000000000000000K0d,    .cdxkkkxkkxxxkkxkxxxkkxl;.   .:c;''''''''''''''''..        ;0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXo.         ..''''''''':ok0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Oo'    .:dxkxxkkxxxxkkxxdl;.   .;oO00x:'''''''''''''..        .dNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKl.         ...'''';ok00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Oo'    .;oxxxkxxxxxdc;.    'cx000000kc''''''''''..        .:0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKl.          ..,lk0K0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Oo,    .,cdxxdl:'.    .:dO00K000000kc,''''''..         ,kNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKo'          .;ok00KK00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000KOo,.    .''.     .;oO0000000000000kc'''..          'xNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXx;.          .;lx00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000K00K0d:.        .;ok00000K00000000000x;..          ,dXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0o'           .':ok00K00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000kl,...':oO000000000000000000ko;.         .;xNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNkc.            .,cdk000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000K000kxkO0000000000K0000000kl;.          .cONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkc.             .,:okO0KK00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000K00000kd:'.          .;dKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkl,.             ..;cdkO00K0000000000000000000000000000000000000000000000000000000000000000000000000000000KK00000000000000K0Okoc,.            ,o0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0d:.               ..;coxk00KK0000000000KK00000000000000000000000000000000000000000000000000000000KK00000000000000K00kdl;'.            .,oONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOo:.                 .';cldkO0000KK00000K00000000000000000000000000000000000000000000000000000000000000K000kxoc;'.              .:d0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOd:'.                  ..';:loxkO00000K000000000000000000000000000000000000000000000000000KKK00Okxol:,'.                .;lkXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNKkl:'.                     ..',;:clodxkOO000000K000K000000000000000000KK00000000OOkxdolc:;'..                   .;okKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWN0ko:,.                          ....'',;;:ccclllooooodddddddoooolllcc::;,,'....                       .;cdOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0xoc,..                                                                                   .,:ox0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXKOxoc;'..                                                                   ..':cok0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNXKOxdoc:;'...                                              ...,;cloxOKXNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNNXK0kxddolcc:;;,,'''............''',,;;:cclodxkO0KXNWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWNNNNNNXXXXXXNNNNNWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 */
#include "pch.h"
#include "windows.h"
#include "winternl.h"
#include <stdio.h>
#include "stdlib.h"
#include "ntstatus.h"

#ifndef __kernel_long_t
typedef long		__kernel_long_t;
typedef unsigned long	__kernel_ulong_t;
#endif

#ifndef __kernel_ino_t
typedef __kernel_ulong_t __kernel_ino_t;
#endif

#ifndef __kernel_mode_t
typedef unsigned int	__kernel_mode_t;
#endif

#ifndef __kernel_pid_t
typedef int		__kernel_pid_t;
#endif

#ifndef __kernel_ipc_pid_t
typedef int		__kernel_ipc_pid_t;
#endif

#ifndef __kernel_uid_t
typedef unsigned int	__kernel_uid_t;
typedef unsigned int	__kernel_gid_t;
#endif

#ifndef __kernel_suseconds_t
typedef __kernel_long_t		__kernel_suseconds_t;
#endif

#ifndef __kernel_daddr_t
typedef int		__kernel_daddr_t;
#endif

#ifndef __kernel_uid32_t
typedef unsigned int	__kernel_uid32_t;
typedef unsigned int	__kernel_gid32_t;
#endif

#ifndef __kernel_old_uid_t
typedef __kernel_uid_t	__kernel_old_uid_t;
typedef __kernel_gid_t	__kernel_old_gid_t;
#endif

#ifndef __kernel_old_dev_t
typedef unsigned int	__kernel_old_dev_t;
#endif

typedef __kernel_long_t	__kernel_off_t;
typedef long long	__kernel_loff_t;
typedef __kernel_long_t	__kernel_old_time_t;

#define __u8 UINT8
#define __u16 UINT16
#define __u32 UINT32
#define __u64 UINT64
#define __s8 INT8
#define __s16 INT16
#define __s32 INT32
#define __s64 INT64

struct __uint128_t { UINT64 q[2]; };

#include "ioctl.h"
#include "fcntl.h"
#include "ptrace_arm64.h"
#include "kvm_arm64.h"
#include "kvm.h"
#include "mman.h"

#pragma warning(disable:4996)

#ifdef _M_ARM64
/*
mov x8,#56
mov x3,x2
mov x2,x1
mov x1,x0
mov x0,#-100
svc #0
ret
*/
char open_inst_data[] = { 0x08,0x07,0x80,0xD2,0xE3,0x03,0x02,0xAA,0xE2,0x03,0x01,0xAA,0xE1,0x03,0x00,0xAA,0x60,0x0C,0x80,0x92,0x01,0x00,0x00,0xD4,0xC0,0x03,0x5F,0xD6 };
int (*open)(const char*, int, int) = ((int (*)(const char*, int, int)) & open_inst_data);
/*
mov x8,#29
svc #0
ret
*/
char ioctl_inst_data[] = { 0xA8,0x03,0x80,0xD2,0x01,0x00,0x00,0xD4,0xC0,0x03,0x5F,0xD6 };
int (*ioctl)(unsigned int, UINT64, UINT64) = ((int (*)(unsigned int, UINT64, UINT64)) & ioctl_inst_data);
/*
mov x8,#222
svc #0
ret
*/
char mmap_inst_data[] = { 0xC8,0x1B,0x80,0xD2,0x01,0x00,0x00,0xD4,0xC0,0x03,0x5F,0xD6 };
void* (*mmap)(void*, size_t, int, int, int, unsigned int) = ((void* (*)(void*, size_t, int, int, int, unsigned int)) & mmap_inst_data);
/*
mov x8,#215
svc #0
ret
*/
char munmap_inst_data[] = { 0xE8,0x1A,0x80,0xD2,0x01,0x00,0x00,0xD4,0xC0,0x03,0x5F,0xD6 };
int (*munmap)(void*, size_t) = ((int (*)(void*, size_t)) & munmap_inst_data);
/*
mov x8,#57
svc #0
ret
*/
char close_inst_data[] = { 0x28,0x07,0x80,0xD2,0x01,0x00,0x00,0xD4,0xC0,0x03,0x5F,0xD6 };
int (*close)(unsigned int) = ((int (*)(unsigned int)) & close_inst_data);
#else
#ifdef _M_AMD64
/*
push rdi
push rsi
mov rdi,rcx
mov rsi,rdx
mov rdx,r8
mov r10,r9
mov r8,[rsp+56]
mov r9,[rsp+64]
mov rax,2
syscall
pop rsi
pop rdi
ret
*/
char open_inst_data[] = { 0x57,0x56,0x48,0x89,0xCF,0x48,0x89,0xD6,0x4C,0x89,0xC2,0x4D,0x89,0xCA,0x4C,0x8B,0x44,0x24,0x38,0x4C,0x8B,0x4C,0x24,0x40,0x48,0xC7,0xC0,0x02,0x00,0x00,0x00,0x0F,0x05,0x5E,0x5F,0xC3 };
int (*open)(const char*, int, int) = ((int (*)(const char*, int, int)) & open_inst_data);
/*
push rdi
push rsi
mov rdi,rcx
mov rsi,rdx
mov rdx,r8
mov r10,r9
mov r8,[rsp+56]
mov r9,[rsp+64]
mov rax,16
syscall
pop rsi
pop rdi
ret
*/
char ioctl_inst_data[] = { 0x57,0x56,0x48,0x89,0xCF,0x48,0x89,0xD6,0x4C,0x89,0xC2,0x4D,0x89,0xCA,0x4C,0x8B,0x44,0x24,0x38,0x4C,0x8B,0x4C,0x24,0x40,0x48,0xC7,0xC0,0x10,0x00,0x00,0x00,0x0F,0x05,0x5E,0x5F,0xC3 };
int (*ioctl)(unsigned int, UINT64, UINT64) = ((int (*)(unsigned int, UINT64, UINT64)) & ioctl_inst_data);
/*
push rdi
push rsi
mov rdi,rcx
mov rsi,rdx
mov rdx,r8
mov r10,r9
mov r8,[rsp+56]
mov r9,[rsp+64]
mov rax,9
syscall
pop rsi
pop rdi
ret
*/
char mmap_inst_data[] = { 0x57,0x56,0x48,0x89,0xCF,0x48,0x89,0xD6,0x4C,0x89,0xC2,0x4D,0x89,0xCA,0x4C,0x8B,0x44,0x24,0x38,0x4C,0x8B,0x4C,0x24,0x40,0x48,0xC7,0xC0,0x09,0x00,0x00,0x00,0x0F,0x05,0x5E,0x5F,0xC3 };
void* (*mmap)(void*, size_t, int, int, int, unsigned int) = ((void* (*)(void*, size_t, int, int, int, unsigned int)) & mmap_inst_data);
/*
push rdi
push rsi
mov rdi,rcx
mov rsi,rdx
mov rdx,r8
mov r10,r9
mov r8,[rsp+56]
mov r9,[rsp+64]
mov rax,11
syscall
pop rsi
pop rdi
ret
*/
char munmap_inst_data[] = { 0x57,0x56,0x48,0x89,0xCF,0x48,0x89,0xD6,0x4C,0x89,0xC2,0x4D,0x89,0xCA,0x4C,0x8B,0x44,0x24,0x38,0x4C,0x8B,0x4C,0x24,0x40,0x48,0xC7,0xC0,0x0B,0x00,0x00,0x00,0x0F,0x05,0x5E,0x5F,0xC3 };
int (*munmap)(void*, size_t) = ((int (*)(void*, size_t)) & munmap_inst_data);
/*
push rdi
push rsi
mov rdi,rcx
mov rsi,rdx
mov rdx,r8
mov r10,r9
mov r8,[rsp+56]
mov r9,[rsp+64]
mov rax,3
syscall
pop rsi
pop rdi
ret
*/
char close_inst_data[] = { 0x57,0x56,0x48,0x89,0xCF,0x48,0x89,0xD6,0x4C,0x89,0xC2,0x4D,0x89,0xCA,0x4C,0x8B,0x44,0x24,0x38,0x4C,0x8B,0x4C,0x24,0x40,0x48,0xC7,0xC0,0x03,0x00,0x00,0x00,0x0F,0x05,0x5E,0x5F,0xC3 };
int (*close)(unsigned int) = ((int (*)(unsigned int)) & close_inst_data);
#endif
#endif


extern char modulename4this[4096];
typedef NTSYSAPI NTSTATUS  WINAPI t_LdrLoadDll(LPCWSTR, DWORD, const UNICODE_STRING*, HMODULE*);
t_LdrLoadDll* LdrLoadDll = 0;

typedef struct
{
	ULONG   version;
	ULONG   unknown1[3];
	ULONG64 unknown2;
	ULONG64 pLdrInitializeThunk;
	ULONG64 pKiUserExceptionDispatcher;
	ULONG64 pKiUserApcDispatcher;
	ULONG64 pKiUserCallbackDispatcher;
	ULONG64 pRtlUserThreadStart;
	ULONG64 pRtlpQueryProcessDebugInformationRemote;
	ULONG64 ntdll_handle;
	ULONG64 pLdrSystemDllInitBlock;
	ULONG64 pRtlpFreezeTimeBias;
} SYSTEM_DLL_INIT_BLOCK;

SYSTEM_DLL_INIT_BLOCK* pLdrSystemDllInitBlock = NULL;

typedef NTSYSAPI PVOID t_RtlAllocateHeap(PVOID, ULONG, SIZE_T);
t_RtlAllocateHeap* RtlAllocateHeap = 0;
typedef NTSYSCALLAPI NTSTATUS t_NtSetInformationThread(HANDLE, THREADINFOCLASS, PVOID, ULONG);
t_NtSetInformationThread* NtSetInformationThread_alternative = 0;
typedef NTSTATUS WINAPI t_RtlWow64GetCurrentCpuArea(USHORT, void**, void**);
t_RtlWow64GetCurrentCpuArea* RtlWow64GetCurrentCpuArea = 0;
typedef __kernel_entry NTSTATUS t_NtQueryInformationThread(HANDLE, THREADINFOCLASS, PVOID, ULONG, PULONG);
t_NtQueryInformationThread* NtQueryInformationThread_alternative = 0;

typedef NTSTATUS WINAPI t_Wow64SystemServiceEx(UINT, void*);
t_Wow64SystemServiceEx* Wow64SystemServiceEx = 0;

HMODULE hmhm4dll;

char modulename4this[4096];

typedef NTSYSAPI NTSTATUS  WINAPI t_LdrDisableThreadCalloutsForDll(HMODULE);
t_LdrDisableThreadCalloutsForDll* LdrDisableThreadCalloutsForDll = 0;

typedef NTSTATUS WINAPI t__wine_unix_call(UINT64, unsigned int, void*);
t__wine_unix_call* p__wine_unix_call = 0;

BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
                     )
{
	HMODULE hofntdll = 0;
	HMODULE HM = 0;
	HMODULE HM2 = 0;
	HMODULE HMHM = 0;
	DWORD Tmp;
    switch (ul_reason_for_call)
    {
    case DLL_PROCESS_ATTACH:
		GetModuleFileNameA(hModule, modulename4this, sizeof(modulename4this));
		hmhm4dll = hModule;
		hofntdll = LoadLibraryA("C:\\Windows\\System32\\ntdll.dll");
		if (hofntdll == 0) { return false; }
		LdrLoadDll = (t_LdrLoadDll*)GetProcAddress(hofntdll, "LdrLoadDll");
		LdrDisableThreadCalloutsForDll = (t_LdrDisableThreadCalloutsForDll*)GetProcAddress(hofntdll, "LdrDisableThreadCalloutsForDll");
		if (LdrDisableThreadCalloutsForDll == 0) { return false; }
		RtlAllocateHeap = (t_RtlAllocateHeap*)GetProcAddress(hofntdll, "RtlAllocateHeap");
		NtSetInformationThread_alternative = (t_NtSetInformationThread*)GetProcAddress(hofntdll, "NtSetInformationThread");
		NtQueryInformationThread_alternative = (t_NtQueryInformationThread*)GetProcAddress(hofntdll, "NtQueryInformationThread");
		RtlWow64GetCurrentCpuArea = (t_RtlWow64GetCurrentCpuArea*)GetProcAddress(hofntdll, "RtlWow64GetCurrentCpuArea");
		LdrDisableThreadCalloutsForDll(hModule);
		pLdrSystemDllInitBlock = (SYSTEM_DLL_INIT_BLOCK*)GetProcAddress(hofntdll, "LdrSystemDllInitBlock");
		if (pLdrSystemDllInitBlock != 0) {
			if (pLdrSystemDllInitBlock->ntdll_handle == 0) { pLdrSystemDllInitBlock->ntdll_handle = (ULONG64)hofntdll; }
		}
		HM2 = LoadLibraryA("C:\\Windows\\Sysnative\\Wow64.dll");
		if (HM2 == 0) { HM2 = LoadLibraryA("C:\\Windows\\System32\\Wow64.dll"); }
		if (HM2 == 0) { return false; }
		Wow64SystemServiceEx = (t_Wow64SystemServiceEx*)GetProcAddress(HM2, "Wow64SystemServiceEx");
		if (!p__wine_unix_call) {
			p__wine_unix_call = (t__wine_unix_call*)GetProcAddress(hofntdll, "__wine_unix_call");
		}
		VirtualProtect(ioctl_inst_data, sizeof(ioctl_inst_data), PAGE_EXECUTE_READWRITE, &Tmp);
		VirtualProtect(open_inst_data, sizeof(open_inst_data), PAGE_EXECUTE_READWRITE, &Tmp);
		VirtualProtect(mmap_inst_data, sizeof(mmap_inst_data), PAGE_EXECUTE_READWRITE, &Tmp);
		VirtualProtect(munmap_inst_data, sizeof(munmap_inst_data), PAGE_EXECUTE_READWRITE, &Tmp);
		VirtualProtect(close_inst_data, sizeof(close_inst_data), PAGE_EXECUTE_READWRITE, &Tmp);
		FlushInstructionCache(GetCurrentProcess(), ioctl_inst_data, sizeof(ioctl_inst_data));
		FlushInstructionCache(GetCurrentProcess(), open_inst_data, sizeof(open_inst_data));
		FlushInstructionCache(GetCurrentProcess(), mmap_inst_data, sizeof(mmap_inst_data));
		FlushInstructionCache(GetCurrentProcess(), munmap_inst_data, sizeof(munmap_inst_data));
		FlushInstructionCache(GetCurrentProcess(), close_inst_data, sizeof(close_inst_data));
	case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
        break;
    }
    return TRUE;
}

#if 0
typedef struct DECLSPEC_ALIGN(16) _M128A {
	ULONGLONG Low;
	LONGLONG High;
} M128A, * PM128A;

typedef struct _XSAVE_FORMAT {
	WORD ControlWord;        /* 000 */
	WORD StatusWord;         /* 002 */
	BYTE TagWord;            /* 004 */
	BYTE Reserved1;          /* 005 */
	WORD ErrorOpcode;        /* 006 */
	DWORD ErrorOffset;       /* 008 */
	WORD ErrorSelector;      /* 00c */
	WORD Reserved2;          /* 00e */
	DWORD DataOffset;        /* 010 */
	WORD DataSelector;       /* 014 */
	WORD Reserved3;          /* 016 */
	DWORD MxCsr;             /* 018 */
	DWORD MxCsr_Mask;        /* 01c */
	M128A FloatRegisters[8]; /* 020 */
	M128A XmmRegisters[16];  /* 0a0 */
	BYTE Reserved4[96];      /* 1a0 */
} XSAVE_FORMAT, * PXSAVE_FORMAT;
#endif


struct I386_FLOATING_SAVE_AREA {
	DWORD ControlWord;
	DWORD StatusWord;
	DWORD TagWord;
	DWORD ErrorOffset;
	DWORD ErrorSelector;
	DWORD DataOffset;
	DWORD DataSelector;
	BYTE RegisterArea[80];
	DWORD Cr0NpxState;
};

struct I386_CONTEXT {
	DWORD ContextFlags;

	DWORD Dr0;
	DWORD Dr1;
	DWORD Dr2;
	DWORD Dr3;
	DWORD Dr6;
	DWORD Dr7;

	I386_FLOATING_SAVE_AREA FloatSave;

	DWORD SegGs;
	DWORD SegFs;
	DWORD SegEs;
	DWORD SegDs;

	DWORD Edi;
	DWORD Esi;
	DWORD Ebx;
	DWORD Edx;
	DWORD Ecx;
	DWORD Eax;

	DWORD Ebp;
	DWORD Eip;
	DWORD SegCs;
	DWORD EFlags;
	DWORD Esp;
	DWORD SegSs;

	BYTE ExtendedRegisters[512];
};

#define CONTEXT_EXCEPTION_ACTIVE    0x08000000
#define CONTEXT_SERVICE_ACTIVE      0x10000000
#define CONTEXT_EXCEPTION_REQUEST   0x40000000
#define CONTEXT_EXCEPTION_REPORTING 0x80000000

#define CONTEXT_ARM    0x0200000
#define CONTEXT_ARM_CONTROL         (CONTEXT_ARM | 0x00000001)
#define CONTEXT_ARM_INTEGER         (CONTEXT_ARM | 0x00000002)
#define CONTEXT_ARM_FLOATING_POINT  (CONTEXT_ARM | 0x00000004)
#define CONTEXT_ARM_DEBUG_REGISTERS (CONTEXT_ARM | 0x00000008)
#define CONTEXT_ARM_FULL (CONTEXT_ARM_CONTROL | CONTEXT_ARM_INTEGER)
#define CONTEXT_ARM_ALL  (CONTEXT_ARM_FULL | CONTEXT_ARM_FLOATING_POINT | CONTEXT_ARM_DEBUG_REGISTERS)

#define ARM_MAX_BREAKPOINTS     8
#define ARM_MAX_WATCHPOINTS     1

#if 0
typedef struct _IMAGE_ARM_RUNTIME_FUNCTION
{
	DWORD BeginAddress;
	union {
		DWORD UnwindData;
		struct {
			DWORD Flag : 2;
			DWORD FunctionLength : 11;
			DWORD Ret : 2;
			DWORD H : 1;
			DWORD Reg : 3;
			DWORD R : 1;
			DWORD L : 1;
			DWORD C : 1;
			DWORD StackAdjust : 10;
		} DUMMYSTRUCTNAME;
	} DUMMYUNIONNAME;
} IMAGE_ARM_RUNTIME_FUNCTION_ENTRY, * PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY;

typedef struct _SCOPE_TABLE_ARM
{
	DWORD Count;
	struct
	{
		DWORD BeginAddress;
		DWORD EndAddress;
		DWORD HandlerAddress;
		DWORD JumpTarget;
	} ScopeRecord[1];
} SCOPE_TABLE_ARM, * PSCOPE_TABLE_ARM;
#endif

typedef struct _ARM_NEON128
{
	ULONGLONG Low;
	LONGLONG High;
} ARM_NEON128;

typedef struct _ARM_CONTEXT
{
	ULONG ContextFlags;             /* 000 */
	/* CONTEXT_INTEGER */
	ULONG R0;                       /* 004 */
	ULONG R1;                       /* 008 */
	ULONG R2;                       /* 00c */
	ULONG R3;                       /* 010 */
	ULONG R4;                       /* 014 */
	ULONG R5;                       /* 018 */
	ULONG R6;                       /* 01c */
	ULONG R7;                       /* 020 */
	ULONG R8;                       /* 024 */
	ULONG R9;                       /* 028 */
	ULONG R10;                      /* 02c */
	ULONG R11;                      /* 030 */
	ULONG R12;                      /* 034 */
	/* CONTEXT_CONTROL */
	ULONG Sp;                       /* 038 */
	ULONG Lr;                       /* 03c */
	ULONG Pc;                       /* 040 */
	ULONG Cpsr;                     /* 044 */
	/* CONTEXT_FLOATING_POINT */
	ULONG Fpscr;                    /* 048 */
	ULONG Padding;                  /* 04c */
	union
	{
		ARM_NEON128 Q[16];
		ULONGLONG D[32];
		ULONG S[32];
	} DUMMYUNIONNAME;               /* 050 */
	/* CONTEXT_DEBUG_REGISTERS */
	ULONG Bvr[ARM_MAX_BREAKPOINTS]; /* 150 */
	ULONG Bcr[ARM_MAX_BREAKPOINTS]; /* 170 */
	ULONG Wvr[ARM_MAX_WATCHPOINTS]; /* 190 */
	ULONG Wcr[ARM_MAX_WATCHPOINTS]; /* 194 */
	ULONG Padding2[2];              /* 198 */
} ARM_CONTEXT;

__declspec(align(4)) char bopcode[] = { 0x01,0x00,0x00,0xEF,0x0E,0xF0,0xA0,0xE1 };
__declspec(align(4)) char unixbopcode[] = { 0x02,0x00,0x00,0xEF,0x0E,0xF0,0xA0,0xE1 };
#ifndef ThreadWow64Context
#define ThreadWow64Context (THREADINFOCLASS)0x1d
#endif

#ifndef STATUS_INVALID_ADDRESS
#define STATUS_INVALID_ADDRESS -1073741503
#endif

#ifndef STATUS_SUCCESS
#define STATUS_SUCCESS 0
#endif

typedef struct _GDI_TEB_BATCH
{
	ULONG  Offset;
	HANDLE HDC;
	ULONG  Buffer[0x136];
} GDI_TEB_BATCH;

typedef struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME
{
	struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME* Previous;
	struct _ACTIVATION_CONTEXT* ActivationContext;
	ULONG                                       Flags;
} RTL_ACTIVATION_CONTEXT_STACK_FRAME, * PRTL_ACTIVATION_CONTEXT_STACK_FRAME;

typedef struct _ACTIVATION_CONTEXT_STACK
{
	RTL_ACTIVATION_CONTEXT_STACK_FRAME* ActiveFrame;
	LIST_ENTRY                          FrameListCache;
	ULONG                               Flags;
	ULONG                               NextCookieSequenceNumber;
	ULONG_PTR                           StackId;
} ACTIVATION_CONTEXT_STACK, * PACTIVATION_CONTEXT_STACK;

typedef struct _TEB_ACTIVE_FRAME_CONTEXT
{
	ULONG       Flags;
	const char* FrameName;
} TEB_ACTIVE_FRAME_CONTEXT, * PTEB_ACTIVE_FRAME_CONTEXT;

typedef struct _TEB_ACTIVE_FRAME_CONTEXT_EX
{
	TEB_ACTIVE_FRAME_CONTEXT BasicContext;
	const char* SourceLocation;
} TEB_ACTIVE_FRAME_CONTEXT_EX, * PTEB_ACTIVE_FRAME_CONTEXT_EX;

typedef struct _TEB_ACTIVE_FRAME
{
	ULONG                     Flags;
	struct _TEB_ACTIVE_FRAME* Previous;
	TEB_ACTIVE_FRAME_CONTEXT* Context;
} TEB_ACTIVE_FRAME, * PTEB_ACTIVE_FRAME;

typedef struct _TEB_ACTIVE_FRAME_EX
{
	TEB_ACTIVE_FRAME BasicFrame;
	void* ExtensionIdentifier;
} TEB_ACTIVE_FRAME_EX, * PTEB_ACTIVE_FRAME_EX;

typedef struct _TEB_FLS_DATA
{
	LIST_ENTRY      fls_list_entry;
	void** fls_data_chunks[8];
} TEB_FLS_DATA, * PTEB_FLS_DATA;

typedef struct ___TEB
{                                                                 /* win32/win64 */
	NT_TIB                       Tib;                               /* 000/0000 */
	PVOID                        EnvironmentPointer;                /* 01c/0038 */
	CLIENT_ID                    ClientId;                          /* 020/0040 */
	PVOID                        ActiveRpcHandle;                   /* 028/0050 */
	PVOID                        ThreadLocalStoragePointer;         /* 02c/0058 */
	PPEB                         Peb;                               /* 030/0060 */
	ULONG                        LastErrorValue;                    /* 034/0068 */
	ULONG                        CountOfOwnedCriticalSections;      /* 038/006c */
	PVOID                        CsrClientThread;                   /* 03c/0070 */
	PVOID                        Win32ThreadInfo;                   /* 040/0078 */
	ULONG                        User32Reserved[26];                /* 044/0080 */
	ULONG                        UserReserved[5];                   /* 0ac/00e8 */
	PVOID                        WOW32Reserved;                     /* 0c0/0100 */
	ULONG                        CurrentLocale;                     /* 0c4/0108 */
	ULONG                        FpSoftwareStatusRegister;          /* 0c8/010c */
	PVOID                        ReservedForDebuggerInstrumentation[16]; /* 0cc/0110 */
#ifdef _WIN64
	PVOID                        SystemReserved1[30];               /*    /0190 */
#else
	PVOID                        SystemReserved1[26];               /* 10c/     used for krnl386 private data in Wine */
#endif
	char                         PlaceholderCompatibilityMode;      /* 174/0280 */
	char                         PlaceholderReserved[11];           /* 175/0281 */
	DWORD                        ProxiedProcessId;                  /* 180/028c */
	ACTIVATION_CONTEXT_STACK     ActivationContextStack;            /* 184/0290 */
	UCHAR                        WorkingOnBehalfOfTicket[8];        /* 19c/02b8 */
	LONG                         ExceptionCode;                     /* 1a4/02c0 */
	ACTIVATION_CONTEXT_STACK* ActivationContextStackPointer;     /* 1a8/02c8 */
	ULONG_PTR                    InstrumentationCallbackSp;         /* 1ac/02d0 */
	ULONG_PTR                    InstrumentationCallbackPreviousPc; /* 1b0/02d8 */
	ULONG_PTR                    InstrumentationCallbackPreviousSp; /* 1b4/02e0 */
#ifdef _WIN64
	ULONG                        TxFsContext;                       /*    /02e8 */
	BOOLEAN                      InstrumentationCallbackDisabled;   /*    /02ec */
#else
	BOOLEAN                      InstrumentationCallbackDisabled;   /* 1b8/     */
	BYTE                         SpareBytes1[23];                   /* 1b9/     */
	ULONG                        TxFsContext;                       /* 1d0/     */
#endif
	GDI_TEB_BATCH                GdiTebBatch;                       /* 1d4/02f0 used for ntdll private data in Wine */
	CLIENT_ID                    RealClientId;                      /* 6b4/07d8 */
	HANDLE                       GdiCachedProcessHandle;            /* 6bc/07e8 */
	ULONG                        GdiClientPID;                      /* 6c0/07f0 */
	ULONG                        GdiClientTID;                      /* 6c4/07f4 */
	PVOID                        GdiThreadLocaleInfo;               /* 6c8/07f8 */
	ULONG_PTR                    Win32ClientInfo[62];               /* 6cc/0800 used for user32 private data in Wine */
	PVOID                        glDispatchTable[233];              /* 7c4/09f0 */
	PVOID                        glReserved1[29];                   /* b68/1138 */
	PVOID                        glReserved2;                       /* bdc/1220 */
	PVOID                        glSectionInfo;                     /* be0/1228 */
	PVOID                        glSection;                         /* be4/1230 */
	PVOID                        glTable;                           /* be8/1238 */
	PVOID                        glCurrentRC;                       /* bec/1240 */
	PVOID                        glContext;                         /* bf0/1248 */
	ULONG                        LastStatusValue;                   /* bf4/1250 */
	UNICODE_STRING               StaticUnicodeString;               /* bf8/1258 */
	WCHAR                        StaticUnicodeBuffer[261];          /* c00/1268 */
	PVOID                        DeallocationStack;                 /* e0c/1478 */
	PVOID                        TlsSlots[64];                      /* e10/1480 */
	LIST_ENTRY                   TlsLinks;                          /* f10/1680 */
	PVOID                        Vdm;                               /* f18/1690 */
	PVOID                        ReservedForNtRpc;                  /* f1c/1698 */
	PVOID                        DbgSsReserved[2];                  /* f20/16a0 */
	ULONG                        HardErrorDisabled;                 /* f28/16b0 */
	PVOID                        Instrumentation[16];               /* f2c/16b8 */
	PVOID                        WinSockData;                       /* f6c/1738 */
	ULONG                        GdiBatchCount;                     /* f70/1740 */
	ULONG                        Spare2;                            /* f74/1744 */
	ULONG                        GuaranteedStackBytes;              /* f78/1748 */
	PVOID                        ReservedForPerf;                   /* f7c/1750 */
	PVOID                        ReservedForOle;                    /* f80/1758 */
	ULONG                        WaitingOnLoaderLock;               /* f84/1760 */
	PVOID                        Reserved5[3];                      /* f88/1768 */
	PVOID* TlsExpansionSlots;                 /* f94/1780 */
#ifdef _WIN64
	PVOID                        DeallocationBStore;                /*    /1788 */
	PVOID                        BStoreLimit;                       /*    /1790 */
#endif
	ULONG                        ImpersonationLocale;               /* f98/1798 */
	ULONG                        IsImpersonating;                   /* f9c/179c */
	PVOID                        NlsCache;                          /* fa0/17a0 */
	PVOID                        ShimData;                          /* fa4/17a8 */
	ULONG                        HeapVirtualAffinity;               /* fa8/17b0 */
	PVOID                        CurrentTransactionHandle;          /* fac/17b8 */
	TEB_ACTIVE_FRAME* ActiveFrame;                       /* fb0/17c0 */
	TEB_FLS_DATA* FlsSlots;                          /* fb4/17c8 */
	PVOID                        PreferredLanguages;                /* fb8/17d0 */
	PVOID                        UserPrefLanguages;                 /* fbc/17d8 */
	PVOID                        MergedPrefLanguages;               /* fc0/17e0 */
	ULONG                        MuiImpersonation;                  /* fc4/17e8 */
	USHORT                       CrossTebFlags;                     /* fc8/17ec */
	USHORT                       SameTebFlags;                      /* fca/17ee */
	PVOID                        TxnScopeEnterCallback;             /* fcc/17f0 */
	PVOID                        TxnScopeExitCallback;              /* fd0/17f8 */
	PVOID                        TxnScopeContext;                   /* fd4/1800 */
	ULONG                        LockCount;                         /* fd8/1808 */
	LONG                         WowTebOffset;                      /* fdc/180c */
	PVOID                        ResourceRetValue;                  /* fe0/1810 */
	PVOID                        ReservedForWdf;                    /* fe4/1818 */
	ULONGLONG                    ReservedForCrt;                    /* fe8/1820 */
	GUID                         EffectiveContainerId;              /* ff0/1828 */
} __TEB, * __PTEB;

typedef struct _WOW64INFO
{
	ULONG   NativeSystemPageSize;
	ULONG   CpuFlags;
	ULONG   Wow64ExecuteFlags;
	ULONG   unknown[5];
	USHORT  NativeMachineType;
	USHORT  EmulatedMachineType;
} WOW64INFO;

#if 0

#define __u32 UINT32
#define __u64 UINT64

/* for KVM_SET_USER_MEMORY_REGION */
struct kvm_userspace_memory_region {
	__u32 slot;
	__u32 flags;
	__u64 guest_phys_addr;
	__u64 memory_size; /* bytes */
	__u64 userspace_addr; /* start of the userspace allocated memory */
};

/* for KVM_SET_USER_MEMORY_REGION2 */
struct kvm_userspace_memory_region2 {
	__u32 slot;
	__u32 flags;
	__u64 guest_phys_addr;
	__u64 memory_size;
	__u64 userspace_addr;
	__u64 guest_memfd_offset;
	__u32 guest_memfd;
	__u32 pad1;
	__u64 pad2[14];
};
#endif

int kvmfd = 0;

#define AARCH64_CORE_REG(x)   (KVM_REG_ARM64 | KVM_REG_SIZE_U64 | \
                 KVM_REG_ARM_CORE | KVM_REG_ARM_CORE_REG(x))

#define AARCH64_SIMD_CORE_REG(x)   (KVM_REG_ARM64 | KVM_REG_SIZE_U128 | \
                 KVM_REG_ARM_CORE | KVM_REG_ARM_CORE_REG(x))

#define AARCH64_SIMD_CTRL_REG(x)   (KVM_REG_ARM64 | KVM_REG_SIZE_U32 | \
                 KVM_REG_ARM_CORE | KVM_REG_ARM_CORE_REG(x))

#define ARM64_32_SYS_REG(op0,op1,crn,crm,op2) (__ARM64_SYS_REG(op0,op1,crn,crm,op2) | KVM_REG_SIZE_U32)



int kvm_set_one_reg(unsigned int cs, UINT64 id, void* source)
{
	struct kvm_one_reg reg;
	int r;

	reg.id = id;
	reg.addr = (uintptr_t)source;
	r = ioctl(cs, KVM_SET_ONE_REG, (UINT64)&reg);
	return r;
}

int kvm_get_one_reg(unsigned int cs, UINT64 id, void* target)
{
	struct kvm_one_reg reg;
	int r;

	reg.id = id;
	reg.addr = (uintptr_t)target;
	r = ioctl(cs, KVM_GET_ONE_REG, (UINT64)&reg);
	return r;
}

UINT64 get_kvm_regs(unsigned int run, kvm_regs *regs_tmp)
{
	int r = 0;
	struct kvm_regs regs;
	for (int cnt = 0; cnt < 31; cnt++) {
		if (r = kvm_get_one_reg((UINT32)run, AARCH64_CORE_REG(regs.regs[cnt]), &regs.regs.regs[cnt])) { break; }
	}
	if (r) { return ((UINT64)r & (UINT64)0xFFFFFFFF) | ((UINT64)1 << 48); }
	if (r = kvm_get_one_reg((UINT32)run, AARCH64_CORE_REG(regs.sp), &regs.regs.sp)) { return ((UINT64)r & (UINT64)0xFFFFFFFF) | ((UINT64)2 << 48); }
	if (r = kvm_get_one_reg((UINT32)run, AARCH64_CORE_REG(regs.pc), &regs.regs.pc)) { return ((UINT64)r & (UINT64)0xFFFFFFFF) | ((UINT64)3 << 48); }
	if (r = kvm_get_one_reg((UINT32)run, AARCH64_CORE_REG(regs.pstate), &regs.regs.pstate)) { return ((UINT64)r & (UINT64)0xFFFFFFFF) | ((UINT64)4 << 48); }
	if (r = kvm_get_one_reg((UINT32)run, AARCH64_CORE_REG(sp_el1), &regs.sp_el1)) { return ((UINT64)r & (UINT64)0xFFFFFFFF) | ((UINT64)5 << 48); }
	if (r = kvm_get_one_reg((UINT32)run, AARCH64_CORE_REG(elr_el1), &regs.elr_el1)) { return ((UINT64)r & (UINT64)0xFFFFFFFF) | ((UINT64)6 << 48); }
	for (int cnt = 0; cnt < 5; cnt++) {
		if (r = kvm_get_one_reg((UINT32)run, AARCH64_CORE_REG(spsr[cnt]), &regs.spsr[cnt])) { break; }
	}
	if (r) { return ((UINT64)r & (UINT64)0xFFFFFFFF) | ((UINT64)7 << 48); }
	for (int cnt = 0; cnt < 32; cnt++) {
		if (r = kvm_get_one_reg((UINT32)run, AARCH64_SIMD_CORE_REG(fp_regs.vregs[cnt]), &regs.fp_regs.vregs[cnt])) { break; }
	}
	if (r) { return ((UINT64)r & (UINT64)0xFFFFFFFF) | ((UINT64)8 << 48); }
	if (r = kvm_get_one_reg((UINT32)run, AARCH64_SIMD_CTRL_REG(fp_regs.fpsr), &regs.fp_regs.fpsr)) { return ((UINT64)r & (UINT64)0xFFFFFFFF) | ((UINT64)9 << 48); }
	if (r = kvm_get_one_reg((UINT32)run, AARCH64_SIMD_CTRL_REG(fp_regs.fpcr), &regs.fp_regs.fpcr)) { return ((UINT64)r & (UINT64)0xFFFFFFFF) | ((UINT64)10 << 48); }
	memcpy((void*)regs_tmp, &regs, sizeof(kvm_regs));
	return ((UINT64)r & (UINT64)0xFFFFFFFF);
}

UINT64 set_kvm_regs(unsigned int run, kvm_regs* regs_tmp)
{
	int r = 0;
	struct kvm_regs regs;
	memcpy(&regs, (void*)regs_tmp, sizeof(kvm_regs));
	for (int cnt = 0; cnt < 31; cnt++) {
		if (r = kvm_set_one_reg((UINT32)run, AARCH64_CORE_REG(regs.regs[cnt]), &regs.regs.regs[cnt])) { break; }
	}
	if (r) { return ((UINT64)r & (UINT64)0xFFFFFFFF) | ((UINT64)1 << 48); }
	if (r = kvm_set_one_reg((UINT32)run, AARCH64_CORE_REG(regs.sp), &regs.regs.sp)) { return ((UINT64)r & (UINT64)0xFFFFFFFF) | ((UINT64)2 << 48); }
	if (r = kvm_set_one_reg((UINT32)run, AARCH64_CORE_REG(regs.pc), &regs.regs.pc)) { return ((UINT64)r & (UINT64)0xFFFFFFFF) | ((UINT64)3 << 48); }
	if (r = kvm_set_one_reg((UINT32)run, AARCH64_CORE_REG(regs.pstate), &regs.regs.pstate)) { return ((UINT64)r & (UINT64)0xFFFFFFFF) | ((UINT64)4 << 48); }
	if (r = kvm_set_one_reg((UINT32)run, AARCH64_CORE_REG(sp_el1), &regs.sp_el1)) { return ((UINT64)r & (UINT64)0xFFFFFFFF) | ((UINT64)5 << 48); }
	if (r = kvm_set_one_reg((UINT32)run, AARCH64_CORE_REG(elr_el1), &regs.elr_el1)) { return ((UINT64)r & (UINT64)0xFFFFFFFF) | ((UINT64)6 << 48); }
	for (int cnt = 0; cnt < 5; cnt++) {
		if (r = kvm_set_one_reg((UINT32)run, AARCH64_CORE_REG(spsr[cnt]), &regs.spsr[cnt])) { break; }
	}
	if (r) { return ((UINT64)r & (UINT64)0xFFFFFFFF) | ((UINT64)7 << 48); }
	for (int cnt = 0; cnt < 32; cnt++) {
		if (r = kvm_set_one_reg((UINT32)run, AARCH64_SIMD_CORE_REG(fp_regs.vregs[cnt]), &regs.fp_regs.vregs[cnt])) { break; }
	}
	if (r) { return ((UINT64)r & (UINT64)0xFFFFFFFF) | ((UINT64)8 << 48); }
	if (r = kvm_set_one_reg((UINT32)run, AARCH64_SIMD_CTRL_REG(fp_regs.fpsr), &regs.fp_regs.fpsr)) { return ((UINT64)r & (UINT64)0xFFFFFFFF) | ((UINT64)9 << 48); }
	if (r = kvm_set_one_reg((UINT32)run, AARCH64_SIMD_CTRL_REG(fp_regs.fpcr), &regs.fp_regs.fpcr)) { return ((UINT64)r & (UINT64)0xFFFFFFFF) | ((UINT64)10 << 48); }
	return ((UINT64)r & (UINT64)0xFFFFFFFF);
}

UINT32* interruptvect;

__declspec(align(4096)) struct basicpt{
unsigned long long l0_page_table[512];
unsigned long long l1_page_table[512];
unsigned long long l2_page_table[131072];
unsigned long long l3_page_table[1048576];
};

__declspec(align(4096)) basicpt basicalypage;

const char regtypeno[16][64] = { "none","REG","SP","PC","PSTATE","SP_EL1","ELR_EL1","SPSR","VREG","FPSR","FPCR" };

UINT64 execute_vcpu(unsigned int vcpufd, kvm_regs* regs)
{
	UINT64 r = 0;
	if (r = set_kvm_regs(vcpufd, regs)) { return r | ((UINT64)1 << 32); }
	if (r = ioctl(vcpufd, KVM_RUN, NULL)) { get_kvm_regs(vcpufd, regs); return ((UINT64)r & (UINT64)0xFFFFFFFF) | ((UINT64)2 << 32); }
	if (r = get_kvm_regs(vcpufd, regs)) { return r | ((UINT64)4 << 32); }
	return 0;
}

/*
hvc #4
*/
__declspec(align(4)) UINT8 svchandl[] = { 0x82,0x00,0x00,0xD4,0x00,0x00,0x00,0x14 };

static inline void* get_wow_teb(__TEB* teb) { return teb->WowTebOffset ? (void*)((char*)teb + teb->WowTebOffset) : NULL; }

#ifdef __cplusplus
extern "C" {
#endif

	__declspec(dllexport) void* WINAPI BTCpuGetBopCode(void) { return (UINT32*)&bopcode; }
	__declspec(dllexport) NTSTATUS WINAPI BTCpuGetContext(HANDLE thread, HANDLE process, void* unknown, ARM_CONTEXT* ctx) { return NtQueryInformationThread_alternative(thread, ThreadWow64Context, ctx, sizeof(*ctx), NULL); }
	__declspec(dllexport) NTSTATUS WINAPI BTCpuProcessInit(void) {
		struct kvm_one_reg reg_one;
		DWORD Tmp;
		if ((ULONG_PTR)BTCpuProcessInit >> 32) { return STATUS_INVALID_ADDRESS; }

#if 1
		/* l3 page table */
		/* RAM        : AF=1, SH=3, Indx=0, EntryType=1 */
		for (UINT64 i = 0; i < 1048576; i++) {
			basicalypage.l3_page_table[i] = (((UINT64)((i > 0) ? 1 : 0)) << 52) | (((UINT64)i << (12)) & 0xFFFFFFFFF000) | (1 << 10) | (3 << 8) | (1 << 6) | (0 << 2) | 3;
		}
		/* l2 page table */
		for (int i = 0; i < 2048; i++) {
			basicalypage.l2_page_table[i] = ((((UINT64)&basicalypage.l3_page_table[i * 512] >> 12) << 12) & 0xFFFFFFFFF000) | (1 << 10) | (3 << 8) | (1 << 6) | 3;
		}
		basicalypage.l2_page_table[2048] = ((((UINT64)0x1000000000 >> 12) << 12) & 0xFFFFFFFFF000) | (1 << 10) | (3 << 8) | (1 << 6) | 3;
		/* l1 page table */
		for (int i = 0; i < 4; i++) {
			basicalypage.l1_page_table[i] = ((((UINT64)&basicalypage.l2_page_table[i * 512] >> 12) << 12) & 0xFFFFFFFFF000) | (1 << 10) | (3 << 8) | (1 << 6) | 3;
		}
		for (int i = 4; i < 512; i++) {
			basicalypage.l1_page_table[i] = 0;
		}
		basicalypage.l0_page_table[0] = ((((UINT64)&basicalypage.l1_page_table[0] >> 12) << 12) & 0xFFFFFFFFF000) | (1 << 10) | (3 << 8) | (1 << 6) | 3;
		for (int i = 1; i < 512; i++) {
			basicalypage.l0_page_table[i] = 0;
		}
#else
		basicalypage.l1_page_table[0] = ((UINT64)(0 * 8) << (12)) | 1 << 10 | 3 << 8 | 1 << 6 | 1 << 5 | 0 << 2 | 1;
		basicalypage.l1_page_table[1] = ((UINT64)(512 * 8) << (12)) | 1 << 10 | 3 << 8 | 1 << 6 | 1 << 5 | 0 << 2 | 1;
		basicalypage.l1_page_table[2] = ((UINT64)(1024 * 8) << (12)) | 1 << 10 | 3 << 8 | 1 << 6 | 1 << 5 | 0 << 2 | 1;
		basicalypage.l1_page_table[3] = ((UINT64)(1536 * 8) << (12)) | 1 << 10 | 3 << 8 | 1 << 6 | 1 << 5 | 0 << 2 | 1;
		for (int i = 4; i < 512; i++) {
			basicalypage.l1_page_table[i] = 0;
		}
#endif

		VirtualProtect(bopcode, sizeof(bopcode), PAGE_EXECUTE_READWRITE, &Tmp);
		FlushInstructionCache(GetCurrentProcess(), bopcode, sizeof(bopcode));
		VirtualProtect(unixbopcode, sizeof(unixbopcode), PAGE_EXECUTE_READWRITE, &Tmp);
		FlushInstructionCache(GetCurrentProcess(), unixbopcode, sizeof(unixbopcode));
		interruptvect = (UINT32*)0xffffff8000000000;//0x100000000;//0x1fffff000;
#if 0
		interruptvect = (UINT32*)VirtualAlloc((LPVOID)0x6bff0000,4096,0x3000,0x40);
		if (((UINT64)interruptvect >> 32)) { return STATUS_INVALID_ADDRESS; }
		if (interruptvect == 0) { return STATUS_MEMORY_NOT_ALLOCATED; }
		else {
			for (int cnt = 0; cnt < 0x200; cnt++) {
				interruptvect[cnt / 4] = 0xD4000002;
			}
			/*interruptvect[0] = 0;
			interruptvect[11] = (UINT32)&svchandl;*/
			//interruptvect[0x080 / 4] = 0x14000000;
			/*interruptvect[0x080 / 4] = 0xB2407FEF;
			interruptvect[0x084 / 4] = 0x394001F0;
			interruptvect[0x088 / 4] = 0x14000000;/**/
			/*interruptvect[0x080 / 4] = 0xD4000082;
			interruptvect[0x084 / 4] = 0x14000000;/**/
			/*interruptvect[0x080 / 4] = 0xE22FF001;
			interruptvect[0x084 / 4] = 0x8004F7E0;
			interruptvect[0x088 / 4] = 0x0000E7FE;/**/
			/*interruptvect[0x600 / 4] = 0xE22FF001;
			interruptvect[0x604 / 4] = 0x8004F7E0;
			interruptvect[0x608 / 4] = 0x0000E7FE;/**/
			/*interruptvect[0x680 / 4] = 0xE22FF001;
			interruptvect[0x684 / 4] = 0x8004F7E0;
			interruptvect[0x688 / 4] = 0x0000E7FE;/**/
			/*interruptvect[0x700 / 4] = 0xE22FF001;
			interruptvect[0x704 / 4] = 0x8004F7E0;
			interruptvect[0x708 / 4] = 0x0000E7FE;/**/
			/*interruptvect[0x780 / 4] = 0xE22FF001;
			interruptvect[0x784 / 4] = 0x8004F7E0;
			interruptvect[0x788 / 4] = 0x0000E7FE;/**/
		}
#endif
		return STATUS_SUCCESS;
	}
	__declspec(dllexport) NTSTATUS WINAPI BTCpuThreadInit(void) { return STATUS_SUCCESS; }
	__declspec(dllexport) NTSTATUS WINAPI BTCpuResetToConsistentState(EXCEPTION_POINTERS* ptrs) { return STATUS_SUCCESS; }
	__declspec(dllexport) NTSTATUS WINAPI BTCpuSetContext(HANDLE thread, HANDLE process, void* unknown, ARM_CONTEXT* ctx) { return NtSetInformationThread_alternative(thread, ThreadWow64Context, ctx, sizeof(*ctx)); }
	__declspec(dllexport) void WINAPI BTCpuSimulate(void) {
		ARM_CONTEXT* wow_context;
		struct kvm_regs regs;
		NTSTATUS ret;
		int vmfd = 0;
		struct kvm_userspace_memory_region region;
		struct kvm_userspace_memory_region region2;
		struct kvm_userspace_memory_region region3;
		struct kvm_vcpu_init preferred;
		struct kvm_vcpu_init init;
		EXCEPTION_RECORD rec;
emuresume:
		RtlWow64GetCurrentCpuArea(NULL, (void**)&wow_context, NULL);
		if (kvmfd == 0) { kvmfd = open("/dev/kvm", 0, O_RDWR | O_CLOEXEC); }
		if (kvmfd <= 0) { kvmfd = 0; printf("Opening \"/dev/kvm\" Failed\nErrcode:%d\n", kvmfd); return; }
		int api_ver = ioctl(kvmfd, KVM_GET_API_VERSION, 0);
		UINT64 max_vm_pa_size = ioctl(kvmfd, KVM_CHECK_EXTENSION, KVM_CAP_ARM_VM_IPA_SIZE);
		if (max_vm_pa_size < 0) { max_vm_pa_size = 0; }
		UINT8* arm64stack = (UINT8*)VirtualAlloc((LPVOID)0, 8192, 0x3000, 0x40);
		if (vmfd == 0) {
			vmfd = ioctl(kvmfd, KVM_CREATE_VM, KVM_VM_TYPE_ARM_IPA_SIZE(40));
			if (vmfd < 0) { vmfd = 0; printf("KVM_CREATE_VM Failed\nErrcode:%d\n", vmfd); return; }
			region.slot = 0;
			region.flags = 0;
			region.guest_phys_addr = 0x100000000;
			region.memory_size = 0xf00000000;
			region.userspace_addr = 0x100000000;
			if ((ret = ioctl(vmfd, KVM_SET_USER_MEMORY_REGION, (UINT64)&region)) < 0) {
				printf("KVM_SET_USER_MEMORY_REGION Failed\nErrcode:%d\n", ret);
				return;
			}
			region2.slot = 1;
			region2.flags = 0;
			region2.guest_phys_addr = 0x10000;
			region2.memory_size = (0x100000000 - 0x10000);
			region2.userspace_addr = 0x10000;
			if ((ret = ioctl(vmfd, KVM_SET_USER_MEMORY_REGION, (UINT64)&region2)) < 0) {
				printf("KVM_SET_USER_MEMORY_REGION Failed\nErrcode:%d\n", ret);
				return;
			}
			region3.slot = 2;
			region3.flags = 0;
			region3.guest_phys_addr = 0;
			region3.memory_size = 0x10000;
			region3.userspace_addr = 0;
			if ((ret = ioctl(vmfd, KVM_SET_USER_MEMORY_REGION, (UINT64)&region3)) < 0) {
				printf("KVM_SET_USER_MEMORY_REGION Failed\nErrcode:%d\n", ret);
				return;
			}
		}
		int vcpuidunusedx = 0;
vcpuidunusedxp:
		int vcpufd = ioctl(vmfd, KVM_CREATE_VCPU, vcpuidunusedx);
		if (vcpufd == -17) { vcpuidunusedx++; goto vcpuidunusedxp; }
		if (vcpufd < 0) { printf("KVM_CREATE_VCPU Failed\nErrcode:%d\n", vcpufd); return; }
		//init.target = KVM_ARM_TARGET_GENERIC_V8;
		ret = ioctl(vmfd, KVM_ARM_PREFERRED_TARGET, (UINT64)&preferred);
		init.target = preferred.target;
		for (int cnt = 0; cnt < 7; cnt++) { init.features[cnt] = preferred.features[cnt]; }
		if (!ret) {
			init.target = preferred.target;
		}
		//init.features[0] |= (1 << KVM_ARM_VCPU_EL1_32BIT);
		init.features[0] &= ~(1 << KVM_ARM_VCPU_HAS_EL2);
		ret = ioctl(vcpufd, KVM_ARM_VCPU_INIT, (UINT64)&init);
		if (ret < 0) {
			printf("KVM_ARM_VCPU_INIT Failed\nErrcode:%d\n", ret);
			return;
		}
		size_t vcpu_mmap_size = ioctl(kvmfd, KVM_GET_VCPU_MMAP_SIZE, NULL);
		struct kvm_run* run = (struct kvm_run*)mmap(0,
			vcpu_mmap_size,
			PROT_READ | PROT_WRITE,
			MAP_SHARED,
			vcpufd, 0);
		__TEB* teb = (__TEB*)NtCurrentTeb();
		UINT64 TPIDR_EL0tmp = PtrToUlong(get_wow_teb(teb));
		UINT64 ESR_EL1tmp = (0 << 26);

		UINT64 TCR_EL1tmp = (0b00LL << 37) | // TBI=0, no tagging
							(0b000LL << 32) | // IPS= 32 bit ... 000 = 32bit, 001 = 36bit, 010 = 40bit
							(0b10LL << 30) | // TG1=4k ... options are 10=4KB, 01=16KB, 11=64KB ... take care differs from TG0
							(0b11LL << 28) | // SH1=3 inner ... options 00 = Non-shareable, 01 = INVALID, 10 = Outer Shareable, 11 = Inner Shareable
							(0b01LL << 26) | // ORGN1=1 write back .. options 00 = Non-cacheable, 01 = Write back cacheable, 10 = Write thru cacheable, 11 = Write Back Non-cacheable
							(0b01LL << 24) | // IRGN1=1 write back .. options 00 = Non-cacheable, 01 = Write back cacheable, 10 = Write thru cacheable, 11 = Write Back Non-cacheable
							(0b0LL << 23) | // EPD1 ... Translation table walk disable for translations using TTBR1_EL1  0 = walk, 1 = generate fault
							(25LL << 16) | // T1SZ=25 (512G) ... The region size is 2 POWER (64-T1SZ) bytes
							(0b00LL << 14) | // TG0=4k  ... options are 00=4KB, 01=64KB, 10=16KB,  ... take care differs from TG1
							(0b11LL << 12) | // SH0=3 inner ... .. options 00 = Non-shareable, 01 = INVALID, 10 = Outer Shareable, 11 = Inner Shareable
							(0b01LL << 10) | // ORGN0=1 write back .. options 00 = Non-cacheable, 01 = Write back cacheable, 10 = Write thru cacheable, 11 = Write Back Non-cacheable
							(0b01LL << 8) | // IRGN0=1 write back .. options 00 = Non-cacheable, 01 = Write back cacheable, 10 = Write thru cacheable, 11 = Write Back Non-cacheable
							(0b0LL << 7) | // EPD0  ... Translation table walk disable for translations using TTBR0_EL1  0 = walk, 1 = generate fault
							(25LL << 0);   // T0SZ=25 (512G)  ... The region size is 2 POWER (64-T0SZ) bytes
		UINT64 SCTLR_EL1tmp = 0;
		ret = kvm_get_one_reg(vcpufd, ARM64_SYS_REG(3, 0, 1, 0, 0), &SCTLR_EL1tmp);
		if (ret < 0) {
			printf("KVM_GET_ONE_REG(SCTLR_EL1) Failed\nErrcode:%d\n", ret);
			return;
		}
		SCTLR_EL1tmp |= 0xC00800;	  // set mandatory reserved bits
		SCTLR_EL1tmp |= (1 << 12) |   // I, Instruction cache enable. 
						(1 << 4)  |   // SA0, Stack Alignment Check Enable for EL0
						(1 << 3)  |   // SA, Stack Alignment Check Enable
						(1 << 2)  |   // C, Data cache enable.
						(1 << 1)  |   // A, Alignment check enable bit
						(1 << 0);     // set M, enable MMU
		//SCTLR_EL1tmp &= ~(1 << 25);
		//SCTLR_EL1tmp &= ~(1 << 24);
		//SCTLR_EL1tmp &= ~(1 << 19);
		//SCTLR_EL1tmp &= ~(1 << 12);
		//SCTLR_EL1tmp &= ~(1 << 4);
		//SCTLR_EL1tmp &= ~(1 << 3);
		//SCTLR_EL1tmp &= ~(1 << 2);
		//SCTLR_EL1tmp &= ~(1 << 1);
		//SCTLR_EL1tmp &= ~(1 << 0);
		//SCTLR_EL1tmp |= (1 << 28);

		UINT64 TTBR0_EL1tmp = ((UINT64)&basicalypage.l1_page_table[0]) | (((0) & 3) << 1) | 1;
		UINT64 TTBR1_EL1tmp = ((UINT64)&basicalypage.l3_page_table[0]) | 1;
		UINT64 MAIR_EL1tmp =((0x47ul << (3 * 8)) |   /* normal memory and non cacheable */
							 (0x00ul << (2 * 8)) |   /* device memory */
							 (0x44ul << (1 * 8)) |   /* normal memory and no data cache */
							 (0xfful << (0 * 8)));   /* normal memory and data cache */
		UINT64 CPACR_EL1tmp = ((UINT64)0x0000000000300000);
		UINT64 VBAR_EL1tmp = (UINT64)interruptvect;
		UINT64 FAR_EL1tmp = 0;
		ret = kvm_set_one_reg(vcpufd, ARM64_SYS_REG(3, 3, 13, 0, 2), &TPIDR_EL0tmp);
		if (ret < 0) {
			printf("KVM_SET_ONE_REG(TPIDR_EL0) Failed\nErrcode:%d\n", ret);
			return;
		}
		/*ret = kvm_set_one_reg(vcpufd, ARM64_SYS_REG(3, 0, 5, 2, 0), &ESR_EL1tmp);
		if (ret < 0) {
			printf("KVM_SET_ONE_REG(ESR_EL1) Failed\nErrcode:%d\n", ret);
			return;
		}*/
		ret = kvm_set_one_reg(vcpufd, ARM64_SYS_REG(3, 0, 10, 2, 0), &MAIR_EL1tmp);
		if (ret < 0) {
			printf("KVM_SET_ONE_REG(MAIR_EL1) Failed\nErrcode:%d\n", ret);
			return;
		}
		ret = kvm_set_one_reg(vcpufd, ARM64_SYS_REG(3, 0, 2, 0, 0), &TTBR0_EL1tmp);
		if (ret < 0) {
			printf("KVM_SET_ONE_REG(TTBR0_EL1) Failed\nErrcode:%d\n", ret);
			return;
		}
		ret = kvm_set_one_reg(vcpufd, ARM64_SYS_REG(3, 0, 2, 0, 1), &TTBR1_EL1tmp);
		if (ret < 0) {
			printf("KVM_SET_ONE_REG(TTBR1_EL1) Failed\nErrcode:%d\n", ret);
			return;
		}
		ret = kvm_set_one_reg(vcpufd, ARM64_SYS_REG(3, 0, 2, 0, 2), &TCR_EL1tmp);
		if (ret < 0) {
			printf("KVM_SET_ONE_REG(TCR_EL1) Failed\nErrcode:%d\n", ret);
			return;
		}
		ret = kvm_set_one_reg(vcpufd, ARM64_SYS_REG(3, 0, 1, 0, 0), &SCTLR_EL1tmp);
		if (ret < 0) {
			printf("KVM_SET_ONE_REG(SCTLR_EL1) Failed\nErrcode:%d\n", ret);
			return;
		}
		ret = kvm_set_one_reg(vcpufd, ARM64_SYS_REG(3, 0, 1, 0, 2), &CPACR_EL1tmp);
		if (ret < 0) {
			printf("KVM_SET_ONE_REG(CPACR_EL1) Failed\nErrcode:%d\n", ret);
			return;
		}
		ret = kvm_set_one_reg(vcpufd, ARM64_SYS_REG(3, 0, 12, 0, 0), &VBAR_EL1tmp);
		if (ret < 0) {
			printf("KVM_SET_ONE_REG(VBAR_EL1) Failed\nErrcode:%d\n", ret);
			return;
		}
		/*ret = kvm_set_one_reg(vcpufd, ARM64_SYS_REG(3, 0, 6, 0, 0), &FAR_EL1tmp);
		if (ret < 0) {
			printf("KVM_SET_ONE_REG(FAR_EL1) Failed\nErrcode:%d\n", ret);
			return;
		}*/
		UINT8 svctype = 0;
		bool emustopped = false;
		get_kvm_regs(vcpufd, &regs);
		regs.regs.regs[0] = wow_context->R0;
		regs.regs.regs[1] = wow_context->R1;
		regs.regs.regs[2] = wow_context->R2;
		regs.regs.regs[3] = wow_context->R3;
		regs.regs.regs[4] = wow_context->R4;
		regs.regs.regs[5] = wow_context->R5;
		regs.regs.regs[6] = wow_context->R6;
		regs.regs.regs[7] = wow_context->R7;
		regs.regs.regs[8] = wow_context->R8;
		regs.regs.regs[9] = wow_context->R9;
		regs.regs.regs[10] = wow_context->R10;
		regs.regs.regs[11] = wow_context->R11;
		regs.regs.regs[12] = wow_context->R12;
		regs.regs.regs[13] = wow_context->Sp;
		regs.regs.regs[14] = wow_context->Lr;
		regs.regs.pc = wow_context->Pc & 0xFFFFFFFE;
		//regs.regs.pstate = (((wow_context->Cpsr ^ ((!(wow_context->Pc & 1)) << 5)) | ((wow_context->Pc & 1) << 5)) & 0xFE00FC20) | 0x10;
		regs.regs.pstate = (wow_context->Cpsr & 0xFE00FC20) | 0x10;
		if (wow_context->Pc & 1) { regs.regs.pstate |= 0x20; }
		regs.regs.sp = (UINT64)arm64stack + 4096;
		regs.sp_el1 = (UINT64)arm64stack + 8192;
		regs.fp_regs.fpsr = wow_context->Fpscr & 0xF800009F;
		regs.fp_regs.fpcr = wow_context->Fpscr & 0x07F79F00;
		for (int cnt = 0; cnt < 16; cnt++) { regs.fp_regs.vregs[cnt].q[0] = wow_context->Q[cnt].Low; regs.fp_regs.vregs[cnt].q[1] = wow_context->Q[cnt].High; }
#if 0
		regs.spsr[0] = (regs.regs.pstate & 0xFFFFFFE0) | 0x5 | ((UINT64)((((UINT64)wow_context->Pc) & 1) << ((UINT64)5)));
		regs.spsr[1] = (regs.regs.pstate & 0xFFFFFFE0) | 0x7 | ((UINT64)((((UINT64)wow_context->Pc) & 1) << ((UINT64)5)));
		regs.spsr[2] = (regs.regs.pstate & 0xFFFFFFE0) | 0xb | ((UINT64)((((UINT64)wow_context->Pc) & 1) << ((UINT64)5)));
		regs.spsr[3] = (regs.regs.pstate & 0xFFFFFFE0) | 0x2 | ((UINT64)((((UINT64)wow_context->Pc) & 1) << ((UINT64)5)));
		regs.spsr[4] = (regs.regs.pstate & 0xFFFFFFE0) | 0x1 | ((UINT64)((((UINT64)wow_context->Pc) & 1) << ((UINT64)5)));
#else
		//regs.spsr[0] = (regs.spsr[0] & 0x1C0) | regs.regs.pstate;
		regs.spsr[0] = 0x5;
		regs.spsr[1] = 0x7;
		regs.spsr[2] = 0xb;
		regs.spsr[3] = 0x2;
		regs.spsr[4] = 0x1;/**/
#endif
		UINT64 ret64 = 0;
		while (emustopped == false) {
		executeinst:
			ret64 = execute_vcpu(vcpufd, &regs);
			if ((ret64 >> 32) & 2) {
				if (((int)(ret64 & 0xFFFFFFFF)) == -14) {
					if (((UINT64)regs.regs.pc & 0xFFFFFFFFFFFFF800) == VBAR_EL1tmp) {
						//printf("exc:%03X\n", ((UINT32)regs.regs.pc & 0x7FF));
						//printf("R0:%08X\nR1:%08X\nR2:%08X\nR3:%08X\nR4:%08X\nR5:%08X\nR6:%08X\nR7:%08X\nR8:%08X\nR9:%08X\nR10:%08X\nR11:%08X\nR12:%08X\nR13:%08X\nR14:%08X\nR15:%08X\nSP:%08X\nPCREAL:%08X\n", (UINT32)(regs.regs.regs[0] >> 0), (UINT32)(regs.regs.regs[1] >> 0), (UINT32)(regs.regs.regs[2] >> 0), (UINT32)(regs.regs.regs[3] >> 0), (UINT32)(regs.regs.regs[4] >> 0), (UINT32)(regs.regs.regs[5] >> 0), (UINT32)(regs.regs.regs[6] >> 0), (UINT32)(regs.regs.regs[7] >> 0), (UINT32)(regs.regs.regs[8] >> 0), (UINT32)(regs.regs.regs[9] >> 0), (UINT32)(regs.regs.regs[10] >> 0), (UINT32)(regs.regs.regs[11] >> 0), (UINT32)(regs.regs.regs[12] >> 0), (UINT32)(regs.regs.regs[13] >> 0), (UINT32)(regs.regs.regs[14] >> 0), (UINT32)((regs.elr_el1) >> 0), (UINT32)(regs.regs.sp >> 0), (UINT32)(regs.regs.pc >> 0));

						kvm_get_one_reg(vcpufd, ARM64_SYS_REG(3, 0, 5, 2, 0), &ESR_EL1tmp);
						//printf("ESR_EL1:%08X%08X\n", (UINT64)ESR_EL1tmp >> 32, (UINT64)ESR_EL1tmp >> 0);
						if (((ESR_EL1tmp >> 26) & 0x3f) == 0b010001) {
							svctype = (UINT16)ESR_EL1tmp;
							//printf("Syscall:%08X\nsyscalltype:%08X\n", regs.regs.regs[12], svctype);
							emustopped = true;
							break;
						}
						{
							wow_context->R0 = regs.regs.regs[0];
							wow_context->R1 = regs.regs.regs[1];
							wow_context->R2 = regs.regs.regs[2];
							wow_context->R3 = regs.regs.regs[3];
							wow_context->R4 = regs.regs.regs[4];
							wow_context->R5 = regs.regs.regs[5];
							wow_context->R6 = regs.regs.regs[6];
							wow_context->R7 = regs.regs.regs[7];
							wow_context->R8 = regs.regs.regs[8];
							wow_context->R9 = regs.regs.regs[9];
							wow_context->R10 = regs.regs.regs[10];
							wow_context->R11 = regs.regs.regs[11];
							wow_context->R12 = regs.regs.regs[12];
							wow_context->Sp = regs.regs.regs[13];
							wow_context->Lr = regs.regs.regs[14];
							wow_context->Pc = (regs.regs.pc) | ((regs.regs.pstate >> 5) & 1);
							wow_context->Cpsr = (regs.regs.pstate & 0xFE00FC20);
							wow_context->Fpscr = (regs.fp_regs.fpcr | regs.fp_regs.fpsr);
							for (int cnt = 0; cnt < 16; cnt++) { wow_context->Q[cnt].Low = regs.fp_regs.vregs[cnt].q[0]; wow_context->Q[cnt].High = regs.fp_regs.vregs[cnt].q[1]; }

							if (((ESR_EL1tmp >> 26) & 0x3f) == 0b100100) {
								rec.ExceptionCode = EXCEPTION_DATATYPE_MISALIGNMENT;
								rec.ExceptionFlags = 0;
								rec.ExceptionRecord = NULL;
								rec.ExceptionAddress = ULongToPtr(regs.elr_el1);
								rec.NumberParameters = 0;
								RtlRaiseException(&rec);
								emustopped = true;
								break;
							}
							else if (((ESR_EL1tmp >> 26) & 0x3f) == 0b100010) {
								rec.ExceptionCode = EXCEPTION_DATATYPE_MISALIGNMENT;
								rec.ExceptionFlags = 0;
								rec.ExceptionRecord = NULL;
								rec.ExceptionAddress = ULongToPtr(regs.elr_el1);
								rec.NumberParameters = 0;
								RtlRaiseException(&rec);
								emustopped = true;
								break;
							}
							else if (((ESR_EL1tmp >> 26) & 0x3f) == 0b100110) {
								rec.ExceptionCode = EXCEPTION_DATATYPE_MISALIGNMENT;
								rec.ExceptionFlags = 0;
								rec.ExceptionRecord = NULL;
								rec.ExceptionAddress = ULongToPtr(regs.elr_el1);
								rec.NumberParameters = 0;
								RtlRaiseException(&rec);
								emustopped = true;
								break;
							}
							else if (((ESR_EL1tmp >> 26) & 0x3f) == 0b001101) {
								rec.ExceptionCode = EXCEPTION_ILLEGAL_INSTRUCTION;
								rec.ExceptionFlags = 0;
								rec.ExceptionRecord = NULL;
								rec.ExceptionAddress = ULongToPtr(regs.elr_el1);
								rec.NumberParameters = 0;
								RtlRaiseException(&rec);
								emustopped = true;
								break;
							}
							else if (((ESR_EL1tmp >> 26) & 0x3f) == 0b000001) {
								rec.ExceptionCode = EXCEPTION_PRIV_INSTRUCTION;
								rec.ExceptionFlags = 0;
								rec.ExceptionRecord = NULL;
								rec.ExceptionAddress = ULongToPtr(regs.elr_el1);
								rec.NumberParameters = 0;
								RtlRaiseException(&rec);
								emustopped = true;
								break;
							}
							else if (((ESR_EL1tmp >> 26) & 0x3f) == 0b000011) {
								rec.ExceptionCode = EXCEPTION_PRIV_INSTRUCTION;
								rec.ExceptionFlags = 0;
								rec.ExceptionRecord = NULL;
								rec.ExceptionAddress = ULongToPtr(regs.elr_el1);
								rec.NumberParameters = 0;
								RtlRaiseException(&rec);
								emustopped = true;
								break;
							}
							else if (((ESR_EL1tmp >> 26) & 0x3f) == 0b000100) {
								rec.ExceptionCode = EXCEPTION_PRIV_INSTRUCTION;
								rec.ExceptionFlags = 0;
								rec.ExceptionRecord = NULL;
								rec.ExceptionAddress = ULongToPtr(regs.elr_el1);
								rec.NumberParameters = 0;
								RtlRaiseException(&rec);
								emustopped = true;
								break;
							}
							else if (((ESR_EL1tmp >> 26) & 0x3f) == 0b000101) {
								rec.ExceptionCode = EXCEPTION_PRIV_INSTRUCTION;
								rec.ExceptionFlags = 0;
								rec.ExceptionRecord = NULL;
								rec.ExceptionAddress = ULongToPtr(regs.elr_el1);
								rec.NumberParameters = 0;
								RtlRaiseException(&rec);
								emustopped = true;
								break;
							}
							else if (((ESR_EL1tmp >> 26) & 0x3f) == 0b000110) {
								rec.ExceptionCode = EXCEPTION_PRIV_INSTRUCTION;
								rec.ExceptionFlags = 0;
								rec.ExceptionRecord = NULL;
								rec.ExceptionAddress = ULongToPtr(regs.elr_el1);
								rec.NumberParameters = 0;
								RtlRaiseException(&rec);
								emustopped = true;
								break;
							}
							else if (((ESR_EL1tmp >> 26) & 0x3f) == 0b000111) {
								rec.ExceptionCode = EXCEPTION_PRIV_INSTRUCTION;
								rec.ExceptionFlags = 0;
								rec.ExceptionRecord = NULL;
								rec.ExceptionAddress = ULongToPtr(regs.elr_el1);
								rec.NumberParameters = 0;
								RtlRaiseException(&rec);
								emustopped = true;
								break;
							}
							else if (((ESR_EL1tmp >> 26) & 0x3f) == 0b101000) {
								if (ESR_EL1tmp & 1) {
									rec.ExceptionCode = EXCEPTION_FLT_INVALID_OPERATION;
									rec.ExceptionFlags = 0;
									rec.ExceptionRecord = NULL;
									rec.ExceptionAddress = ULongToPtr(regs.elr_el1);
									rec.NumberParameters = 0;
									RtlRaiseException(&rec);
								}
								else if (ESR_EL1tmp & 2) {
									rec.ExceptionCode = EXCEPTION_FLT_DIVIDE_BY_ZERO;
									rec.ExceptionFlags = 0;
									rec.ExceptionRecord = NULL;
									rec.ExceptionAddress = ULongToPtr(regs.elr_el1);
									rec.NumberParameters = 0;
									RtlRaiseException(&rec);
								}
								else if (ESR_EL1tmp & 4) {
									rec.ExceptionCode = EXCEPTION_FLT_OVERFLOW;
									rec.ExceptionFlags = 0;
									rec.ExceptionRecord = NULL;
									rec.ExceptionAddress = ULongToPtr(regs.elr_el1);
									rec.NumberParameters = 0;
									RtlRaiseException(&rec);
								}
								else if (ESR_EL1tmp & 8) {
									rec.ExceptionCode = EXCEPTION_FLT_UNDERFLOW;
									rec.ExceptionFlags = 0;
									rec.ExceptionRecord = NULL;
									rec.ExceptionAddress = ULongToPtr(regs.elr_el1);
									rec.NumberParameters = 0;
									RtlRaiseException(&rec);
								}
								else if (ESR_EL1tmp & 16) {
									rec.ExceptionCode = EXCEPTION_FLT_INEXACT_RESULT;
									rec.ExceptionFlags = 0;
									rec.ExceptionRecord = NULL;
									rec.ExceptionAddress = ULongToPtr(regs.elr_el1);
									rec.NumberParameters = 0;
									RtlRaiseException(&rec);
								}
								emustopped = true;
								break;
							}
							else if (((ESR_EL1tmp >> 26) & 0x3f) == 0b110000) {
								rec.ExceptionCode = EXCEPTION_BREAKPOINT;
								rec.ExceptionFlags = 0;
								rec.ExceptionRecord = NULL;
								rec.ExceptionAddress = ULongToPtr(regs.elr_el1);
								rec.NumberParameters = 0;
								RtlRaiseException(&rec);
								emustopped = true;
								break;
							}
							else if (((ESR_EL1tmp >> 26) & 0x3f) == 0b111000) {
								rec.ExceptionCode = EXCEPTION_BREAKPOINT;
								rec.ExceptionFlags = 0;
								rec.ExceptionRecord = NULL;
								rec.ExceptionAddress = ULongToPtr(regs.elr_el1);
								rec.NumberParameters = 0;
								RtlRaiseException(&rec);
								emustopped = true;
								break;
							}
							else if (((ESR_EL1tmp >> 26) & 0x3f) == 0b110010) {
								rec.ExceptionCode = EXCEPTION_SINGLE_STEP;
								rec.ExceptionFlags = 0;
								rec.ExceptionRecord = NULL;
								rec.ExceptionAddress = ULongToPtr(regs.elr_el1);
								rec.NumberParameters = 0;
								RtlRaiseException(&rec);
								emustopped = true;
								break;
							}
							else {
								rec.ExceptionCode = EXCEPTION_ACCESS_VIOLATION;
								rec.ExceptionFlags = 0;
								rec.ExceptionRecord = NULL;
								rec.ExceptionAddress = ULongToPtr(regs.elr_el1);
								rec.NumberParameters = 0;
								RtlRaiseException(&rec);
								emustopped = true;
								break;
							}
						}
						if (((UINT32)regs.regs.pc & 0x7FF) == 0x200) {
							svctype = (regs.regs.regs[12] >> 16) & 0xFFFF;
							regs.regs.regs[12] &= 0xFFFF;
							emustopped = true;
							break;
						}
						else if (((UINT32)regs.regs.pc & 0x7FF) == 0x600) {
							regs.regs.pstate = (regs.regs.pstate & 0xFFFFFFC0) | 0x10 | ((regs.elr_el1 & 1) << 5);
							regs.regs.pc = regs.elr_el1 & 0xFFFFFFFE;
							if ((regs.elr_el1 & 1)) { regs.regs.pc += 2; }
							else { regs.regs.pc += 4; }
							emustopped = true;
							break;
						}
						else if ((((UINT32)regs.regs.pc) & 0x7FF) == 0x780) {
							svctype = 3;
							kvm_get_one_reg(vcpufd, ARM64_SYS_REG(3, 0, 5, 2, 0), &ESR_EL1tmp);
							regs.regs.pstate = (regs.regs.pstate & 0xFFFFFFC0) | 0x10 | ((regs.elr_el1 & 1) << 5);
							regs.regs.pc = regs.elr_el1 & 0xFFFFFFFE;
							UINT32 opcodetmp = 0;
							if ((regs.elr_el1 & 1)) { opcodetmp = ((UINT32)(*(UINT16*)(regs.regs.pc & 0xFFFFFFFE)) << (16 * 0)); regs.regs.pc += 2; if (((opcodetmp >> 13) & 7) == 7 && ((opcodetmp >> 11) & 3) != 0) { opcodetmp |= ((UINT32)(*(UINT16*)(regs.regs.pc & 0xFFFFFFFE)) << (16 * 1)); regs.regs.pc += 2; } }
							else { opcodetmp = *(UINT32*)(regs.regs.pc & 0xFFFFFFFE); regs.regs.pc += 4; }
							// Emulate ldrex,strex instructions!
							if ((regs.elr_el1 & 1)) {
								switch (opcodetmp & 0x0000FFF0) {
								case 0xE850:
									((((opcodetmp >> 28) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 28) & 0xF]) = *(UINT32*)(((((opcodetmp >> 0) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 0) & 0xF]) + (((opcodetmp >> 16) & 0xFF) * 4));
									break;
								case 0xE840:
									*(UINT32*)(((((opcodetmp >> 0) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 0) & 0xF]) + (((opcodetmp >> 16) & 0xFF) * 4)) = ((((opcodetmp >> 28) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 28) & 0xF]);
									((((opcodetmp >> 24) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 24) & 0xF]) = 0;
									break;
								case 0xE8D0:
									if (((opcodetmp >> 20) & 0xF) == 0x4) {
										((((opcodetmp >> 28) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 28) & 0xF]) = *(UINT8*)(((((opcodetmp >> 0) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 0) & 0xF]));
									}
									else if (((opcodetmp >> 20) & 0xF) == 0x5) {
										((((opcodetmp >> 28) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 28) & 0xF]) = *(UINT16*)(((((opcodetmp >> 0) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 0) & 0xF]));
									}
									break;
								case 0xE8C0:
									if (((opcodetmp >> 20) & 0xF) == 0x4) {
										*(UINT8*)(((((opcodetmp >> 0) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 0) & 0xF])) = ((((opcodetmp >> 28) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 28) & 0xF]);
									}
									else if (((opcodetmp >> 20) & 0xF) == 0x4) {
										*(UINT16*)(((((opcodetmp >> 0) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 0) & 0xF])) = ((((opcodetmp >> 28) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 28) & 0xF]);
									}
									((((opcodetmp >> 24) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 24) & 0xF]) = 0;
									break;
								}
							}
							else {
								switch (opcodetmp & 0xFFF00FF0) {
								case 0xE1900F90:
									((((opcodetmp >> 12) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 12) & 0xF]) = *(UINT32*)(((((opcodetmp >> 16) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 16) & 0xF]));
									break;
								case 0xE1800F90:
									*(UINT32*)(((((opcodetmp >> 16) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 16) & 0xF])) = ((((opcodetmp >> 0) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 0) & 0xF]);
									((((opcodetmp >> 12) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 12) & 0xF]) = 0;
									break;
								case 0xE1B00F90:
									((((opcodetmp >> 12) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 12) & 0xF]) = *(UINT32*)(((((opcodetmp >> 16) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 16) & 0xF]));
									break;
								case 0xE1A00F90:
									*(UINT32*)(((((opcodetmp >> 16) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 16) & 0xF])) = ((((opcodetmp >> 0) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 0) & 0xF]);
									((((opcodetmp >> 12) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 12) & 0xF]) = 0;
									break;
								case 0xE1D00F90:
									((((opcodetmp >> 12) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 12) & 0xF]) = *(UINT8*)(((((opcodetmp >> 16) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 16) & 0xF]));
									break;
								case 0xE1C00F90:
									*(UINT8*)(((((opcodetmp >> 16) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 16) & 0xF])) = ((((opcodetmp >> 0) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 0) & 0xF]);
									((((opcodetmp >> 12) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 12) & 0xF]) = 0;
									break;
								case 0xE1F00F90:
									((((opcodetmp >> 12) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 12) & 0xF]) = *(UINT16*)(((((opcodetmp >> 16) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 16) & 0xF]));
									break;
								case 0xE1E00F90:
									*(UINT16*)(((((opcodetmp >> 16) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 16) & 0xF])) = ((((opcodetmp >> 0) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 0) & 0xF]);
									((((opcodetmp >> 12) & 0xF) == 0xF) ? regs.regs.pc : regs.regs.regs[(opcodetmp >> 12) & 0xF]) = 0;
									break;
								}
							}
							emustopped = true;
							break;
						}
						else {
							if (ioctl(vmfd, KVM_SET_USER_MEMORY_REGION, (UINT64)&region) < 0) {
								break;
							}
							if (ioctl(vmfd, KVM_SET_USER_MEMORY_REGION, (UINT64)&region2) < 0) {
								break;
							}
						}
					}
					else { goto executeinst; }
				}
			}
			switch (run->exit_reason) {
			case KVM_EXIT_HYPERCALL:
				svctype = (regs.regs.regs[12] >> 16) & 0xFFFF;
				regs.regs.regs[12] &= 0xFFFF;
				//svctype = run->hypercall.nr;
				//printf("%08X\n", svctype);
				emustopped = true;
				break;
			default:
				if (ioctl(vmfd, KVM_SET_USER_MEMORY_REGION, (UINT64)&region) < 0) {
					emustopped = true;
				}
				if (ioctl(vmfd, KVM_SET_USER_MEMORY_REGION, (UINT64)&region2) < 0) {
					emustopped = true;
				}
				break;
			}
		}
		//printf("Syscall:%08X\nsyscalltype:%08X\n", regs.regs.regs[12], svctype);
#if 0
		if (ret64) {
			if ((ret64 >> 32) & 1) { 
				printf("KVM_SET_ONE_REG Failed\nREGTYPE:%s\nErrcode:%d\n", (&regtypeno[((ret64 >> 48) & 0xF)]), ((int)(ret64 & 0xFFFFFFFF)));
				return;
			} else if ((ret64 >> 32) & 2) { 
				printf("KVM_RUN Failed\nErrcode:%d\n", ((int)(ret64 & 0xFFFFFFFF)));
				return;
			} else if ((ret64 >> 32) & 4) {
				printf("KVM_GET_ONE_REG Failed\nREGTYPE:%s\nErrcode:%d\n", (&regtypeno[((ret64 >> 48) & 0xF)]), ((int)(ret64 & 0xFFFFFFFF)));
				return;
			}
		}
#endif
		wow_context->R0 = regs.regs.regs[0];
		wow_context->R1 = regs.regs.regs[1];
		wow_context->R2 = regs.regs.regs[2];
		wow_context->R3 = regs.regs.regs[3];
		wow_context->R4 = regs.regs.regs[4];
		wow_context->R5 = regs.regs.regs[5];
		wow_context->R6 = regs.regs.regs[6];
		wow_context->R7 = regs.regs.regs[7];
		wow_context->R8 = regs.regs.regs[8];
		wow_context->R9 = regs.regs.regs[9];
		wow_context->R10 = regs.regs.regs[10];
		wow_context->R11 = regs.regs.regs[11];
		wow_context->R12 = regs.regs.regs[12];
		wow_context->Sp = regs.regs.regs[13];
		wow_context->Lr = regs.regs.regs[14];
		wow_context->Pc = (regs.regs.pc) | ((regs.regs.pstate >> 5) & 1);
		wow_context->Cpsr = (regs.regs.pstate & 0xFE00FC20);
		wow_context->Fpscr = (regs.fp_regs.fpcr | regs.fp_regs.fpsr);
		for (int cnt = 0; cnt < 16; cnt++) { wow_context->Q[cnt].Low = regs.fp_regs.vregs[cnt].q[0]; wow_context->Q[cnt].High = regs.fp_regs.vregs[cnt].q[1]; }
		munmap(run, sizeof(kvm_run));
		close(vcpufd);
		close(vmfd);
		vcpufd = 0; vmfd = 0;
		//UINT32 hvctmp = (*(UINT32*)(wow_context->Pc & 0xFFFFFFFE));
		//svctype = (((hvctmp>>8)&0xFF) | (((hvctmp >> 0) & 0xF) << 8) | (((hvctmp >> 24) & 0xF) << 12));
		//printf("%08X\n", hvctmp);
		UINT32* p = 0;
		if (arm64stack != 0) {
			VirtualFree(arm64stack, 0, 0x8000);
		}
	switch (svctype) {
	case 1:
		wow_context->R0 = Wow64SystemServiceEx(wow_context->R12, ULongToPtr(wow_context->Sp));
		wow_context->Pc = wow_context->Lr;
		wow_context->Lr = wow_context->R3;
		wow_context->Sp += 4 * 4;
		goto emuresume;
		break;
	case 2:
		if (p__wine_unix_call != 0) {
			UINT64 handle;
			p = (UINT32*)&handle;
			p[0] = wow_context->R0;
			p[1] = wow_context->R1;
			wow_context->R0 = p__wine_unix_call(handle, wow_context->R2, ULongToPtr(wow_context->R3));
		}
		else { wow_context->R0 = -1; }
		wow_context->Pc = wow_context->Lr;
		goto emuresume;
		break;
	case 3:
		goto emuresume;
		break;
	}
	return;
	}
	__declspec(dllexport) void* WINAPI __wine_get_unix_opcode(void) { return (UINT32*)&unixbopcode; }
	__declspec(dllexport) BOOLEAN WINAPI BTCpuIsProcessorFeaturePresent(UINT feature) { if (feature == 2 || feature == 3 || feature == 6 || feature == 7 || feature == 8 || feature == 10 || feature == 13 || feature == 17 || feature == 36 || feature == 37 || feature == 38) { return true; } return false; }
	__declspec(dllexport) NTSTATUS WINAPI BTCpuTurboThunkControl(ULONG enable) { if (enable) { return STATUS_NOT_SUPPORTED; } return STATUS_SUCCESS; }
	__declspec(dllexport) void WINAPI BTCpuNotifyMemoryProtect(UINT64 addr, SIZE_T size, ULONG newprot, BOOL preorpost, NTSTATUS statuscode) { if (preorpost == FALSE) { for (int cnt = 0; cnt < ((size + 4095) / 4096); cnt++) { if ((((addr >> 12) & 0xFFFFFFFFFFFFF) + cnt) >= 0x100000) { break; } if (newprot & 0xF0) { basicalypage.l3_page_table[(((addr >> 12) & 0xFFFFF) + cnt) & 0xFFFFF] &= ~((UINT64)1 << 54); } else { basicalypage.l3_page_table[(((addr >> 12) & 0xFFFFF) + cnt) & 0xFFFFF] |= ((UINT64)1 << 54); } } } return; }

#ifdef __cplusplus
}
#endif
